常用内建表达式
表达式说明
hasRole([role])   返回true 如果当前主体拥有特定角色。
hasAnyRole([role1,role2])  返回true 如果当前主体拥有任何一个提供的角色（使用逗号分隔的字符串队列）
principal     允许直接访问主体对象，表示当前用户
authentication允许直接访问当前Authentication 对象从SecurityContext 中获得
permitAll 一直返回true
denyAll   一直返回false
isAnonymous()  如果用户是一个匿名登录的用户就会返回true
isRememberMe() 如果用户是通过remember-me 登录的用户就会返回true
isAuthenticated()  如果用户不是匿名用户就会返回true
isFullyAuthenticated()  如果用户不是通过匿名也不是通过remember-me 登录的用户时，就会返回true。


B.1.1. <http>属性
<http>元素的属性控制核心过滤器的一些属性。
B.1.1.1. servlet-api-provision
支持一些版本的HttpServletRequest 提供的安全方法， 必须isUserInRole() 和getPrincipal()，通过向堆栈中添加一个SecurityContextHolderAwareRequestFilterbean 来实现。默认是"true"。

B.1.1.2. path-type
控制拦截URL 的时候，使用ant 路径（默认）或是使用正则表达式。实际中，它向FilterChainProxy 中设置了特定的UrlMatcher。

B.1.1.3. lowercase-comparisons
是否在对URL 进行匹配前，先将URL 转换成小写。如果没有定义，默认是"true"。

B.1.1.4. realm
为基础认证设置realm 名称（如果启用）。对应BasicAuthenticationEntryPoint 中的realmName 属性。

B.1.1.5. entry-point-ref
正常情况下AuthenticationEntryPoint 将根据配置的认证机制进行设置。这个属性让这个行为使用自定义的AuthenticationEntryPoint bean 进行覆盖，它会启动认证流程。

B.1.1.6. access-decision-manager-ref
可选的属性，指定AccessDecisionManager 实现的ID，这应该被认证的HTTP 请求使用。默认情况下一个AffirmativeBased 实现会被RoleVoter 和AuthenticatedVoter 使用。

B.1.1.7. access-denied-page
这个属性已经被access-denied-handler 子元素取代了。

B.1.1.8. once-per-request
对应FilterSecurityInterceptor 的observeOncePerRequest 属性。默认是"true"。

B.1.1.9. create-session
控制创建一个HTTP 会话的紧急程度。如果不设置，默认是"ifRequired"。其他选项是"always"和"never"。这个属性的设置影响HttpSessionContextIntegrationFilter 的
allowSessionCreation 和forceEagerSessionCreation 属性。除非把属性设置为"never"allowSessionCreation 会一直为"true" 。除非把属性设置为"always"forceEagerSessionCreation 
会一直为"false"。所以默认的配置允许会话的创建，但不会强制。如果启用同步会话控制，当forceEagerSessionCreation 被设置为"true" ， 不管这里设置的什么都会抛出异常。使用"never" 会在
HttpSessionContextIntegrationFilter 初始化的过程中导致异常。

B.1.2. <access-denied-handler>
这个元素允许你为默认的AccessDeniedHandler 设置errorPage 属性， 它会被
ExceptionTranslationFilter 用到， （使用error-page 属性，或通过ref 属性提供你自
己的实现。参考ExceptionTranslateFilter 获得更多信息。）

B.1.3. <intercept-url>元素
这个元素用来定义URL 模式集合，应用对什么感兴趣并配置它们应该如何处理。它用来构
建被FilterSecurityInterceptor 使用的FilterInvocationDefinitionSource，也可以从
过滤器链中排除特定的模式（ 通过使用filters="none" 属性）。它也负责配置
ChannelAuthenticationFilter，如果特定的URL 需要通过HTTPS 访问，比如。当匹配
时指定的模式对应了进入的请求，匹配过程就会完成，按照声明的元素顺序。所以最希望
被匹配的模式应该放在上面，最常用的模式应该放在最后。

B.1.3.1. pattern
这个模式定义了URL 路径。内容依赖于http 元素中的path-type 属性，它的默认值是
ant 路径语法。

B.1.3.2. method
HTTP Method 会被用来结合模式来匹配进入的请求。如果忽略，所有的Method 都会匹
配。如果一个相同的模式指定了，使用method 和没有使用method 两种方式， 指定了
method 的匹配将被优先使用。

B.1.3.3. access
列出会被存储在FilterInvocationDefinitionSource 中的访问属性， 为定义的模式/Method 结合的形式。这应该是由分号分隔的安全配置属性队列（比如角色名称）。


B.1.3.4. requires-channel
可以是http 或https， 这是根据一个特定的URL 模式是否应该通过HTTP 或HTTPS 访
问。如果没有偏好还可以选择any。如果这个属性已经出现在任何一个<intercept-url>
上，一个ChannelAuthenticationFilter 会添加到过滤器堆栈里， 它的附加依赖也会添加
到application context 中。查看信道安全获得使用传统bean 的例子配置。
如果添加了一个<port-mappings> 配置， 它会被SecureChannelProcessor 和
InsecureChannelProcessor 使用来决定在重定向到HTTP/HTTPS 的时候使用什么端口。

B.1.3.5. filters
可以只使用“none”作为属性值。它会导致任何匹配的请求完全被Spring Security 忽略。
所有<http> 中的其他配置，影响在请求上，在这个过程中都无法访问安全上下文。在这
个请求过程中访问被保护的方法都会失败。


B.1.4. <port-mappings>元素
默认情况下，PortMapperImpl 的实例会添加到配置中，在重定向到安全和不安全的URL
时使用到。这个元素可以选择用来覆盖类定义的默认映射。每个子<port-mapping>元
素都定义了一对HTTP:HTTPS 端口。默认的映射是80:443和8080:8443。一个覆盖这
些的例子可以在命名空间介绍中看到。

B.1.5. <form-login>元素
用来把一个UsernamePasswordAuthenticationFilter 添加到过滤器堆栈中，把一个
LoginUrlAuthenticationEntryPoint 添加到application context 中来提供需要的认证。
这将永远凌驾于其他命名空间创建的切入点。如果没有提供属性，一个登录页面会自动创
建在"/spring-security-login"这个URL 下[15]。这个行为可以使用下面的属性自定义。

B.1.5.1. login-page
这个URL 应该用来生成登录页面。对应LoginUrlAuthenticationEntryPoint 的
loginFormUrl 属性。默认是"/spring-security-login"。

B.1.5.2. login-processing-url
对应UsernamePasswordAuthenticationFilter 的filterProcessesUrl 属性。默认是"/j_spring_security_check"

B.1.5.3. default-target-url
对应UsernamePasswordAuthenticationFilter 的defaultTargetUrl 属性。如果没有
设置，默认值是"/"（应用的根路径）。一个用户会在登录之后到达这个URL，在他们没有
在登录之前尝试访问一个安全资源，否则他们就会被转向到原来请求的URL。

B.1.5.4. always-use-default-target
如果设置成"true"，用户会一直转发到default-target-url 指定的位置，无论他们在登录
页面之前访问的什么位置。对应UsernamePasswordAuthenticationFilter 的
alwaysUseDefaultTargetUrl 属性。

B.1.5.5. authentication-failure-url
对应UsernamePasswordAuthenticationFilter 的authenticationFailureUrl 属性。定
义了在登录失败时浏览器会重定向的URL 。默认是
"/spring_security_login?login_error"，它会自动被登陆页面生成器处理，并使用一个
错误信息重新渲染登录页面。


B.1.5.6. authentication-success-handler-ref
这可以用来替换default-target-url 和always-use-default-target，你可以完全控制成
功认证之后的导航流向。这个值应该是application context 中的
AuthenticationSuccessHandlerbean 的名称。

B.1.5.7. authentication-failure-handler-ref
可以用来替换authentication-failure-url， 你可以完全控制认证失败之后的导航流向。
这个值应该是application context 中的AuthenticationFailureHandlerbean 的名称。

B.1.6. <http-basic>元素
向配置中添加一个BasicAuthenticationFilter 和BasicAuthenticationEntryPoint。后
一个只有在基于表单登录没有启用的时候才会被用作配置入口。

B.1.7. <remember-me>元素
向堆栈中添加RememberMeAuthenticationFilter 。这会在配置了一个
TokenBasedRememberMeServices ， 或一个
PersistentTokenBasedRememberMeServices ， 或一个用户自定义的实现了
RememberMeServices 的配置设置后启用。

B.1.7.1. data-source-ref
如果设置了这个，PersistentTokenBasedRememberMeServices 会被使用到，并配置
上一个JdbcTokenRepositoryImpl 实例。


B.1.7.2. token-repository-ref
配置一个PersistentTokenBasedRememberMeServices 但是允许使用一个自定义的PersistentTokenRepository bean。

B.1.7.3. services-ref
允许对将要用在过滤器里的RememberMeServices 的实现提供完全控制。这个值将是
application context 里的一个实现了这个接口的bean 的id。

B.1.7.4. token-repository-ref
配置一个PersistentTokenBasedRememberMeServices 但是允许使用一个自定义的
PersistentTokenRepository bean。

B.1.7.5. key 属性
对应AbstractRememberMeServices 的"key"属性。应该设置一个唯一的值来确定
remember-me 的cookies 只对唯一的应用有效。[16]。

B.1.7.6. token-validity-seconds
对应AbstractRememberMeServices 的tokenValiditySeconds 属性。指定
remember-me cookie 生效的秒数周期。默认它会在14日内生效。

B.1.7.7. user-service-ref
remember-me 服务实现要求可以访问UserDetailsService ， 所以在application
context 中必须有一个定义。如果只定义了一个，它会被选中，并被命名空间配置自动使
用。如果这里有多个实例，你可以使用这个树形指定一个bean 的id。

B.1.8. <session-management> 元素
会话管理相关的功能由额外的过滤器栈中的SessionManagementFilter 实现。

B.1.8.1. session-fixation-protection
分析一个已存在的绘画是否应该被销毁，当一个用户认证通过，并启动了一个新会话。如
果设置为"none" ， 则不会出现任何改变。"newSession" 会创建一个新的空会话。
"migrateSession"会创建一个新会话，并把之前会话中的属性都复制到新会话中。默认
是"migrateSession"。
如果启用了会话伪造防御， SessionManagementFilter 会使用一个匹配的
DefaultSessionAuthenticationStrategy。参考这个类的javadoc 获得更多细节。


B.1.9. <concurrent-control>元素
添加对同步会话控制的支持，允许限制一个用户可以拥有的活动会话的数量。会创建一个
ConcurrentSessionFilter ， 连同一个ConcurrentSessionControllerStrategy 和
SessionManagementFilter 的实例。如果已经声明了form-login 元素，策略对象也会
注入到创建的验证过滤器中。一个SessionRegistry 的实例（ SessionRegistryImpl
的实例，除非用户希望使用自定义bean） 会被创建，交给策略使用。

B.1.9.1. max-sessions 属性
对应ConcurrentSessionControllerImpl 的maximumSessions 属性。

B.1.9.2. expired-url 属性
如果一个用户尝试使用一个已经过期"expired"的会话，同步会话控制器会重定性到的
URL。因为用户超过了允许的会话数量，但是又在其他地方登录了系统。除非设置
exception-if-maximum-exceeded，其他时候都应该设置这个属性。如果没有设置值，
一个过期信息会直接写到响应中。

B.1.9.3. error-if-maximum-exceeded 属性
如果设置成"true"，一个SessionAuthenticationException 会被抛出， 当一个用户尝试
超过最大会话允许数量。默认行为是让原始会话过期。

B.1.9.4. session-registry-alias 和session-registry-ref 属性
用户可以提供他们自己的SessionRegistry 实现，使用session-registry-ref 属性。其
他同步会话控制bean 就可以使用它。
它也可以用来使用内部会话注册的引用，用在你自己的bean 或一个管理接口里。你可以
使用session-registry-alias 属性暴露内部bean，给它一个名字你可以在你的配置的任意
地方都使用它。

B.1.10. <anonymous>元素
添加一个AnonymousAuthenticationFilter 和AnonymousAuthenticationProvider
到堆栈里。如果你使用IS_AUTHENTICATED_ANONYMOUSLY 属性，就是必要的。



B.1.11. <x509>元素
添加X.509认证的支持。一个X509AuthenticationFilter 会被添加到堆栈中，会创建一
个PreAuthenticatedProcessingFilterEntryPoint。后一个只有的其他认证机制都没有
使用的情况下才会用到（ 它唯一的功能是返回一个HTTP 403 错误代号）。一个
PreAuthenticatedAuthenticationProvider 也会被创建，并代理用户权限读取到一个
UserDetailsService 里。

B.1.11.1. subject-principal-regex 属性
定义一个正则表达式，会从证书中取出用户名（与UserDetailsService 一起使用）。

B.1.11.2. user-service-ref 属性
允许一个特定的UserDetailsService，与X.509一起使用，当多个实例被配置的时候。如
果没有设置，会尝试自动定位一个合适的实例并使用它。

B.1.12. <openid-login>元素
与<form-login> 类似， 拥有相同的属性。login-processing-url 的默认值是
"/j_spring_openid_security_check" 。一个OpenIDAuthenticationFilter 和
OpenIDAuthenticationProvider 会被注册上。后者需要一个UserDetailsService 的引
用。它也可以使用id 指定，使用user-service-ref 属性，或者在application context
中自动定位。



B.1.13. <logout>元素
添加一个LogoutFilter 到过滤器堆栈中。它和SecurityContextLogoutHandler 一起配
置。

B.1.13.1. logout-url 属性
这个URL 会触发注销操作（ 比如， 会被过滤器处理）。默认是"/j_spring_security_logout"。

B.1.13.2. logout-success-url 属性


用户在注销后转向的URL。默认是"/"。
B.1.13.3. invalidate-session 属性
对应SecurityContextLogoutHandler 的invalidateHttpSession 属性。默认是"true"，
这样注销的时候会销毁会话。

B.1.14. <custom-filter>元素
这个元素用来将一个过滤器添加到过滤器链中。它不会创建额外的bean， 但是它用来选
择选择一个javax.servlet.Filter 类型的bean， 这个bean 已经定义在application
context 中，把它添加到Spring Security 维护的过滤器链的特定位置。全部信息可以在
命名空间章节找到。

B.2. 认证服务
在Spring Security 3.0之前，一个AuthenticationManager 会自动注册， 现在你必须
使用<authentication-manager>元素注册一个bean。这个bean 是Spring Security
的ProviderManager 类的一个实例，它需要配置一个或多个AuthenticationProvider 的
实例。这里可以使用命名空间支持的语法元素，也可以使用标准的bean 定义，使用
custom-authentication-provider 元素来添加列表。


B.2.1. <authentication-manager>元素
每个Spring Security 应用，只要使用了命名空间，就必须在什么地方包含对应的元素。它
负责注册AuthenticationManager，为应用各提供验证服务。它也允许你定义一个别名，
为内部实例，在你的配置中来使用。这些都写在命名空间介绍中。所有元素，创建了
AuthenticationProvider 实例， 应该是这个元素的子元素。
B.2.1.1. <authentication-provider>元素
这个元素基本是配置DaoAuthenticationProvider 的简化形式。
DaoAuthenticationProvider 读取用户信息，从UserDetailsService 中，比较用户名/
密码，来进行用户登录。UserDetailsService 实例可以被定义，无论是命名空间中的
(jdbc-user-service 或使用user-service-ref 属性来引用一个bean ， 定义在
application context 中)。你可以在命名空间介绍中找到。。
B.2.1.2. 使用<authentication-provider> 来引用一个
AuthenticationProvider Bean
如果你已经创建了自己的AuthenticationProvider 实现，（或希望配置Spring Security
提供的一个实现，因为什么原因使用传统配置方式， 你可以使用下面的语法，来把它添加
到内部ProviderManager 列表中：）

B.3. 方法安全
B.3.1. <global-method-security>元素
这个元素是为Spring Security 中的bean 提供安全方法支持的最基本元素。方法可以通
过使用注解来保护（在接口或类级别进行定义）或者作为子元素的切点集合，使用AspectJ
语法。
方法安全使用与web 安全相同的AccessDecisionManager 配置，但是可以使用SectionB.1.1.6, “access-decision-manager-ref”中的解释进行覆盖，使用相同的属性。

B.3.1.1. secured-annotations 和jsr250-annotations 属性
把这些设置为"true"会分别启用对Spring Security 自己的@Secured 注解和JSR-250
注解的支持， 默认情况下它们两个都是禁用的。JSR-250 注解的应用还需要向
AccessDecisionManager 添加一个Jsr250Voter，这样你需要确定你需要做这个，如果
你使用一个自定义的实现，然后想要使用这些注解。

B.3.1.2. 安全方法使用<protect-pointcut>
除了在单独的方法或类的基础上使用@Secured 定义安全属性，你可以定义交叉安全实体，
覆盖你服务层中所有的方法和接口，使用<protect-pointcut>元素。它有两个属性：
expression - 切点表达式
access - 提供的安全属性
你可以在命名空间介绍中找到一个例子。

B.3.1.3. <after-invocation-provider> 元素
这个元素可以用来装饰一个AfterInvocationProvider 来使用安全拦截器， 通过
<global-method-security> 命名空间。你可以定义0 ， 或者多个类， 在
global-method-security 元素中， 每个都使用一个ref 属性引用到一个
AfterInvocationProvider 实例， 在你的application context 中